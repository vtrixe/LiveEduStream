datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole  @default(USER)
  accounts            Account[]
  isTwoFactorEnabled  Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  userProfile         UserProfile? // One-to-one relation with UserProfile
}

model Account {
  id                  String   @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?  @db.Text
  access_token        String?  @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  @db.Text
  session_state       String?
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id                  String   @id @default(cuid())
  email               String
  token               String   @unique
  expires             DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id                  String   @id @default(cuid())
  email               String
  token               String   @unique
  expires             DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                  String   @id @default(cuid())
  email               String
  token               String   @unique
  expires             DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserProfile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  username            String   @unique
  imageUrl            String   @db.Text
  externalUserId      String   @unique
  bio                 String?  @db.Text
  following           Follow[] @relation("Following")
  followedBy          Follow[] @relation("FollowedBy")
  blocking            Block[]  @relation("Blocking")
  blockedBy           Block[]  @relation("BlockedBy")
  stream              Stream?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Stream {
  id                  String   @id @default(uuid())
  name                String   @db.Text
  thumbnailUrl        String?  @db.Text
  ingressId           String?  @unique
  serverUrl           String?  @db.Text
  streamKey           String?  @db.Text
  isLive              Boolean  @default(false)
  isChatEnabled       Boolean  @default(true)
  isChatDelayed       Boolean  @default(false)
  isChatFollowersOnly Boolean  @default(false)
  userId              String   @unique
  user                UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
 
}

model Follow {
  id                  String   @id @default(uuid())
  followerId          String
  followingId         String
  follower            UserProfile @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following           UserProfile @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id                  String   @id @default(uuid())
  blockerId           String
  blockedId           String
  blocker             UserProfile @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked             UserProfile @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
