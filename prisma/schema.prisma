

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}





model User {
  id             String         @id @default(uuid())
  username       String         @unique
  imageUrl       String         @db.Text
  externalUserId String         @unique
  bio            String?        @db.Text
  organizations  Organization[]
  email String?
  enrolled Enroll[] @relation("enrolled")
  enrolledBy Enroll[] @relation("enrolledBy")
  OrganizationRole String?

   blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")


  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  users       User[]
   externalOrganizationId  String   @unique
  organizationDomain String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invitations {
    id          String   @id @default(uuid())

    role String

    OrganizationID String
    email String  @unique
    status String @default("Pending")
    externalInvitationid String @unique
     

      createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Enroll {
  id String @id @default(uuid())
  enrolledId String
  lecturerId String
  enrolled User @relation(name: "enrolled", fields: [enrolledId], references: [id], onDelete: Cascade)
  enrolledBy User @relation(name: "enrolledBy", fields: [lecturerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([enrolledId, lecturerId])
  @@index([enrolledId])
  @@index([lecturerId])
}


model Block {
  id String @id @default(uuid())
  blockerId String
  blockedId String
  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)
  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
